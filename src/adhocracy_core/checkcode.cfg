[buildout]
parts +=
     transifex
     flake
     pylint
     remove_double_quotes_in_python_files
     check_forbbiden_imports
     check_code
     pre_commit_hook

[transifex]
recipe = zc.recipe.egg
eggs =
    transifex-client

[flake]
recipe = zc.recipe.egg
eggs =
    flake8
    flake8_docstrings
    flake8-quotes
    flake8-debugger
    pep8-naming

[pylint]
recipe = zc.recipe.egg
eggs =
    pylint
    ${adhocracy:eggs}
initialization =
    from pylint import run_pylint
    sys.argv[1:1] = [
      '--output-format=colorized',
      '--zope=y'
      ]
entry-points =
    pylint_adhoc=pylint:run_pylint
# pylint is broken, we have set a custom entry point
scripts =
    pylint=pylint_original
    pylint_adhoc=pylint

[check_code]
recipe = collective.recipe.template
python_check =
    if [ x$1 == x"-a" ]; then
        CHANGED_PY=`git ls-files | grep -v sdidemo | grep -v tests | grep '\.py$'`
    else
        CHANGED_PY=`git diff --staged --name-only --diff-filter=ACMR | grep '\.py$'`
    fi
    if [ -n "$CHANGED_PY" ] ; then
        ${buildout:bin-directory}/flake8 --ignore=N805,D101,D102,W503,E305 --exclude=bootstrap.py,conf.py,.svn,CVS,.bzr,.hg,.git,__pycache__,test_*,fixtures*,src/adhocracy_frontend/adhocracy_frontend/static/lib --max-complexity=14 $CHANGED_PY
        ret_code=$(($ret_code + $?))
    fi
css_check =
    # to be extended by other buildout files
js_check =
    # to be extended by other buildout files
html_check =
    # to be extended by other buildout files
input = inline:
    #!/bin/bash
    # This script only checks staged files.
    # The return codes are collected in `ret_code`.
    ret_code=0
    ${:python_check}
    ${:css_check}
    ${:js_check}
    ${:html_check}
    exit $ret_code
output = ${buildout:bin-directory}/ad_check_code
mode = 755

[remove_double_quotes_in_python_files]
recipe = collective.recipe.template
input = inline:
    #!/bin/bash
    find $1 -name "*.py" | grep -v "bootstrap.py\|conf.py" | xargs sed -i "s/\"\"\"/3QUOTEMARKER/g"
    find $1 -name "*.py" | grep -v "bootstrap.py\|conf.py" | xargs sed -i "s/\"/\'/g"
    find $1 -name "*.py" | grep -v "bootstrap.py\|conf.py" | xargs sed -i "s/3QUOTEMARKER/\"\"\"/g"
output = ${buildout:bin-directory}/ad_remove_double_quotes_in_python_files
mode = 755

[check_forbbiden_imports]
recipe = collective.recipe.template
input = inline:
    #!/bin/bash
    BASE_PACKAGES='\.interfaces|\.events|\.utils|\.graph|\.schema'
    grep -r "from adhocracy_core" src/adhocracy_core/adhocracy_core/rest  | grep -v "\.rest" | egrep -v -i $BASE_PACKAGES
    grep -r "from adhocracy_core" src/adhocracy_core/adhocracy_core/registry  | grep -v "\.registry" | egrep -v -i $BASE_PACKAGES
    grep -r "from adhocracy_core" src/adhocracy_core/adhocracy_core/sheets  | grep -v "\.sheets" | egrep -v -i $BASE_PACKAGES
    grep -r "from adhocracy_core" src/adhocracy_core/adhocracy_core/resources  | grep -v "\.resources" | egrep -v -i $BASE_PACKAGES
    grep -r "from adhocracy_core" src/adhocracy_core/adhocracy_core/subscriber  | grep -v "\.subcriber" | egrep -v -i $BASE_PACKAGES
    grep -r "from adhocracy_core" src/adhocracy_core/adhocracy_core/evolution  | grep -v "\.evolution" | egrep -v -i $BASE_PACKAGES
    grep -r "from adhocracy_core" src/adhocracy_core/adhocracy_core/folder  | grep -v "\.folder" | egrep -v -i $BASE_PACKAGES
    grep -r "from adhocracy_core" src/adhocracy_core/adhocracy_core/graph  | grep -v "\.graph" | egrep -v -i $BASE_PACKAGES
    grep -r "from adhocracy_core" src/adhocracy_core/adhocracy_core/schema  | grep -v "\.schema" | egrep -v -i $BASE_PACKAGES
    grep -r "from adhocracy_core" src/adhocracy_core/adhocracy_core/utils  | grep -v "\.utils" | egrep -v -i $BASE_PACKAGES
    grep -r "from adhocracy_core" src/adhocracy_core/adhocracy_core/events  | grep -v "\.utils" | egrep -v -i $BASE_PACKAGES
output = ${buildout:bin-directory}/ad_check_forbbiden_imports
mode = 755

[pre_commit_hook]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    if [ "$ADHOCRACY_GIT_NO_VERIFY" != "1" ]; then
    echo -n "\n\nCode validation pre commit hook: bin/ad_check_code\n"
    echo -n "To disable, run 'git commit' with '--no-verify' or "
    echo -n "set shell variable ADHOCRACY_GIT_NO_VERIFY to \"1\".\n\n\n"
    exec bin/ad_check_code
    else
    echo "\n\nGit pre-commit hook disabled by ADHOCRACY_GIT_NO_VERIFY\n\n"
    fi
output = ${buildout:directory}/.git/hooks/pre-commit
mode = 755

